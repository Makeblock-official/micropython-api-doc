[Micropython][TPBasic F103]18B20温度测量
===============================================

	原创版权归山东萝卜科技有限公司所有,转载必须以链接形式注明作者和原始出处


	一、什么是TPBasicF103
------------------------------------------

	TPYBasicF103是由TurnipSmart公司制作的一款STM32开发板，它基于STM32F103单片机，通过USB接口进行数据传输。该开发板可在3V-10V之间的电压正常工作。

	TPYBasicF103让用户可以通过C语言轻松控制微控制器的各种外设，比如LED等，读取管脚电压等等.

	二、利用TPBasicF103完成18B20温度测量
---------------------------------------------------

	1、具体要求
----------------------------------------------

	利用TPBasicF103完成18B20温度测量

	（1）学习stm32芯片I/O配置

	（2）学习stm32芯片定时器设置

	（3）学习DS18B20的用法

	（4）学习串口调试用法

	2、熟悉所需器件
---------------------------------

	- TPBasicF103开发板一块

	- DS18B20三极管一个

	- 10K电阻一个

	- 杜邦线三条

	- USB转串口器件

	3、所需器件介绍
--------------------------------------

	将板子boot0与GND用跳线帽短接，3脚集电极接3.3V电源，2脚接板子C5引脚（具体电路可根据程序自行选择引脚），1脚接GND，2脚与3脚间接一个10K电阻。

	.. image::http://www.tpyboard.com/ueditor/php/upload/image/20170502/1493725275225265.png

	.. image::http://www.tpyboard.com/ueditor/php/upload/image/20170502/1493725285513024.png

	.. image::http://www.tpyboard.com/ueditor/php/upload/image/20170502/1493725295943293.png

	.. image::http://www.tpyboard.com/ueditor/php/upload/image/20170502/1493725306909100.png

	三、制作主要过程
----------------------------------------

	.. image::http://www.tpyboard.com/ueditor/php/upload/image/20170502/1493725346200569.png

	1、制作流程
-------------------------------

	DS18B20简介

	DS18B20是由DALLAS半导体公司推出的一种的“一线总线”接口的温度传感器。与传统的热敏电阻等测温元件相比，它是一种新型的体积小、适用电压宽、与微处理器接口简单的数字化温度传感器。一线总线结构具有简洁且经济的特点，可使用户轻松地组建传感器网络，从而为测量系统的构建引入全新概念，测量温度范围为-55~+125℃，精度为±0.5℃。

	现场温度直接以“一线总线”的数字方式传输，大大提高了系统的抗干扰性。它能直接读出被测温度，并且可根据实际要求通过简单的编程实现9~l2位的数字值读数方式。它工作在3—5.5V的电压范围，采用多种封装形式，从而使系统设计灵活、方便，设定分辨率及

	用户设定的报警温度存储在EEPROM中，掉电后依然保存。其内部结构如图所示：
	　　
	.. image::http://www.tpyboard.com/ueditor/php/upload/image/20170502/1493725374503447.png

	ROM中的64位序列号是出厂前被光记好的，它可以看作是该DS18B20的地址序列码，每个DS18B20的64位序列号均不相同。64位ROM的排列是：前8位是产品家族码，接着48位是DS18B20的序列号，最后8位是前面56位的循环冗余校验码(CRC=X8+X5

	+X4+1)。ROM作用是使每一个DS18B20都各不相同，这样就可实现一根总线上挂接多个。

	所有的单总线器件要求采用严格的信号时序，以保证数据的完整性。DS18B20共有6种信号类型：复位脉冲、应答脉冲、写0、写1、读0和读1。所有这些信号，除了应答脉冲以外，都由主机发出同步信号。并且发送所有的命令和数据都是字节的低位在前。这里我们

	简单介绍这几个信号的时序：

	1）复位脉冲和应答脉冲

	单总线上的所有通信都是以初始化序列开始。主机输出低电平，保持低电平时间至少

	480us，，以产生复位脉冲。接着主机释放总线，4.7K的上拉电阻将单总线拉高，延时15～

	60us，并进入接收模式(Rx)。接着DS18B20拉低总线60~240us，以产生低电平应答脉冲，

	若为低电平，再延时480us。

	2）写时序

	写时序包括写0时序和写1时序。所有写时序至少需要60us，且在2次独立的写时序之间至少需要1us的恢复时间，两种写时序均起始于主机拉低总线。写1时序：主机输出低电平，延时2us，然后释放总线，延时60us。写0时序：主机输出低电平，延时60us，

	然后释放总线，延时2us。

	3）读时序

	单总线器件仅在主机发出读时序时，才向主机传输数据，所以，在主机发出读数据命令后，必须马上产生读时序，以便从机能够传输数据。所有读时序至少需要60us，且在2次独立的读时序之间至少需要1us的恢复时间。每个读时序都由主机发起，至少拉低总线1us。主机在读时序期间必须释放总线，并且在时序起始后的15us之内采样总线状态。典型的读时序过程为：主机输出低电平延时2us，然后主机转入输入模式延时12us，然后读取单总线当前的电平，然后延时50us。

	2、具体代码::

		#include "public.h"
		#include "printf.h"
		#include "ds18b20.h"
		#include "systick.h"
		int main()
		{    
			  double temp;
			  printf_init();    
			  ds18b20_init();    
			  while(1)
			  {
				   temp=readtemp(); 
				   printf("当前温度为：%0.4lf°C\r\n",temp);         
			  }               
		}

	..LINK:http://www.tpyboard.com/ueditor/php/upload/file/20170502/1493725443257212.zip